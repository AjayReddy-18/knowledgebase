{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"git_scoping/","title":"Scoping in Git","text":"<p>When working with Git, you might encounter a situation where most of your repositories should use one set of credentials, but one or two repositories need to recognize you as a different user.</p> <p>I faced this problem when I started using a client-provided laptop. To get familiar with the machine, I began practicing Git on it. All my personal work was on that machine, and I wanted to push it to my own GitHub account. However, I couldn\u2019t change the global Git configuration because the laptop was set up with the client\u2019s credentials.</p> <p>That\u2019s when I learned about Git Scoping.</p>"},{"location":"git_scoping/#git-configuration-scopes","title":"Git Configuration Scopes","text":"<p>Git supports three levels of configuration scope:</p> <ul> <li>Local: Applies to a specific repository (i.e., directory-based).</li> <li>Global: Applies to the current user across all repositories on the machine.</li> <li>System: Applies to all users on the entire machine.</li> </ul>"},{"location":"git_scoping/#precedence-order","title":"Precedence Order","text":"<p>Git applies configuration settings based on the following order of precedence:</p> <p>Local &gt; Global &gt; System</p> <p>This means:</p> <ul> <li>A setting in the local scope overrides the same setting in the global or system scope.</li> <li>A setting in the global scope overrides the system scope.</li> <li>The system scope provides the base-level configuration for all users.</li> </ul>"},{"location":"git_scoping/#configuring-git-with-scopes","title":"Configuring Git with Scopes","text":"<p>You can use the <code>git config</code> command to set configurations at different scopes:</p> <pre><code># Local scope: only for the current repository\ngit config --local user.name \"Your Name\"\ngit config --local user.email \"your.email@example.com\"\n</code></pre> <p>You can use --global or --system instead of --local to change the scope.</p>"},{"location":"nuget_package_generation/","title":"NuGet Package Generation","text":"<p>This guide explains two common ways to generate a NuGet package from a C# project.</p>"},{"location":"nuget_package_generation/#method-1-using-nuget-cli","title":"Method 1: Using <code>nuget</code> CLI","text":"<p>This method is ideal for older projects (e.g., .NET Framework or non-SDK-style projects).</p>"},{"location":"nuget_package_generation/#steps","title":"Steps:","text":"<ol> <li>Open a terminal and navigate to the project folder.</li> <li> <p>Run the following command to generate a <code>.nuspec</code> file:    <code>bash    nuget spec</code>    This creates a <code>&lt;project-name&gt;.nuspec</code> file with placeholder metadata.</p> </li> <li> <p>Open the <code>.nuspec</code> file and fill in the required metadata:</p> </li> <li><code>id</code></li> <li><code>version</code></li> <li><code>authors</code></li> <li><code>description</code></li> <li> <p>etc.</p> </li> <li> <p>Generate the <code>.nupkg</code> package:    <code>bash    nuget pack &lt;project-name&gt;.csproj</code>    This builds the project and uses the <code>.nuspec</code> file to generate the package in the current directory.</p> </li> </ol> <p>You can also pack using the <code>.nuspec</code> directly:</p> <pre><code>nuget pack &lt;project-name&gt;.nuspec\n</code></pre>"},{"location":"nuget_package_generation/#method-2-using-dotnet-cli","title":"Method 2: Using <code>dotnet</code> CLI","text":"<p>Use this method for modern SDK-style projects (.NET Core / .NET 5+).</p>"},{"location":"nuget_package_generation/#steps_1","title":"Steps:","text":"<ol> <li>Open a terminal and navigate to the project folder.</li> <li>Run the following command:    <code>bash    dotnet pack</code>    This uses the metadata defined in the <code>.csproj</code> file and builds the <code>.nupkg</code> package.</li> </ol>"},{"location":"nuget_package_generation/#optional-flags","title":"Optional Flags:","text":"<ul> <li>To specify the output directory:   <code>bash   dotnet pack -o ./nupkgs</code></li> <li>To include symbols:   <code>bash   dotnet pack --include-symbols</code></li> </ul> <p>No <code>.nuspec</code> file is needed; all metadata should be in the <code>.csproj</code>.</p>"},{"location":"nuget_package_generation/#notes","title":"Notes","text":"<ul> <li>Use <code>dotnet</code> CLI for newer projects that follow the SDK-style format.</li> <li>Use <code>nuget</code> CLI if you're working with older, non-SDK-style projects.</li> <li>Both methods support pushing the package to NuGet:</li> <li><code>nuget push &lt;package&gt;.nupkg -Source &lt;source-url&gt; -ApiKey &lt;key&gt;</code></li> <li><code>dotnet nuget push &lt;package&gt;.nupkg --source &lt;source-url&gt; --api-key &lt;key&gt;</code></li> </ul>"},{"location":"nuget_package_generation/#references","title":"References","text":"<ul> <li>NuGet CLI Reference</li> <li>dotnet pack Documentation</li> </ul>"}]}